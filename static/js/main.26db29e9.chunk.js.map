{"version":3,"sources":["logo.svg","loading.svg","components/Button/Button.js","components/AlbumCover/AlbumCover.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","children","AlbumCover","trackCover","track","album","images","url","src","alt","className","getRandomNumber","x","Math","floor","random","App","state","areTracksLoaded","tracks","currentTrack","expireTimeout","setTimeout","changeTrack","fetch","method","headers","Authorization","then","response","json","data","currentTrackIndex","items","length","setState","prevProps","prevState","this","id","trackId","swal","clearTimeout","displayedTracksIds","secondTrack","getNonDisplayedTrack","push","array","counter","index","temp","shuffleArray","randomTrackIndex","includes","trackOptions","getTrackOptions","logo","preview_url","playStatus","Sound","status","PLAYING","map","key","checkAnswer","name","loading","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.26db29e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","import React from 'react';\nimport './AlbumCover.css';\n\nconst AlbumCover = ({ track }) => {\n  const trackCover = track.album.images[0].url;\n\n  return <img src={trackCover} alt=\"track-cover\" className=\"album-cover\" />;\n};\n\nexport default AlbumCover;\n","/*global swal*/\n\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './components/Button/Button';\nimport AlbumCover from './components/AlbumCover/AlbumCover';\n\nconst apiToken =\n  'BQCVA_PB8Mty4iQotUkHDIROjpcgwln1hMWjj5iS-2c1kdmAki3iuUmG68kPC4wkseuzAan6plzW-r718YnBjeD_f9kuRtNZ4fImehK6hxSsYYnBmFHig4jc7W_qrZA8yRnWZ5D5hxZvUJNyGyY7JUHzs_zMPq6TSyIfItw-YIuAwy-_papFFYEZX1DmILciIh5dhZ_vr3bvOEC8N-6iYmvJzBkZB0lTeFvthWVG9RZRZKnJ8XYg2IJmmSiKCym__tBYa_RkKHYE_IonNTVCEA';\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      areTracksLoaded: false,\n      tracks: [],\n      currentTrack: null,\n      expireTimeout: null\n    };\n  }\n\n  componentDidMount() {\n    const expireTimeout = setTimeout(() => this.changeTrack(), 30000);\n    fetch('https://api.spotify.com/v1/me/tracks', {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + apiToken\n      }\n    })\n      .then(response => response.json())\n      .then(data => {\n        const currentTrackIndex = getRandomNumber(data.items.length);\n        this.setState({\n          areTracksLoaded: true,\n          tracks: data.items,\n          currentTrack: data.items[currentTrackIndex].track,\n          expireTimeout\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevState.currentTrack &&\n      this.state.currentTrack &&\n      prevState.currentTrack.id !== this.state.currentTrack.id\n    ) {\n      const expireTimeout = setTimeout(() => this.changeTrack(), 30000);\n      this.setState({\n        expireTimeout\n      });\n    }\n  }\n\n  checkAnswer(trackId) {\n    if (trackId === this.state.currentTrack.id) {\n      swal(\"Bravo, c'est la bonne réponse\", 'On continue ?', 'success').then(\n        () => {\n          this.changeTrack();\n          clearTimeout(this.state.expireTimeout);\n        }\n      );\n    } else {\n      swal('Oops, mauvaise réponse', 'Try again', 'error');\n    }\n  }\n\n  changeTrack() {\n    const { tracks } = this.state;\n    this.setState({\n      currentTrack: tracks[getRandomNumber(tracks.length)].track\n    });\n  }\n\n  getTrackOptions() {\n    const { currentTrack } = this.state;\n    const displayedTracksIds = [currentTrack.id];\n\n    const secondTrack = this.getNonDisplayedTrack(displayedTracksIds);\n    displayedTracksIds.push(secondTrack.id);\n    const thirdTrack = this.getNonDisplayedTrack(displayedTracksIds);\n\n    return shuffleArray([currentTrack, secondTrack, thirdTrack]);\n  }\n\n  getNonDisplayedTrack(displayedTracksIds) {\n    const { tracks } = this.state;\n\n    let randomTrackIndex = getRandomNumber(tracks.length);\n    let track = tracks[randomTrackIndex].track;\n\n    while (displayedTracksIds.includes(track.id)) {\n      randomTrackIndex = getRandomNumber(tracks.length);\n      track = tracks[randomTrackIndex].track;\n    }\n\n    return track;\n  }\n\n  render() {\n    const { areTracksLoaded, currentTrack } = this.state;\n\n    if (areTracksLoaded) {\n      const trackOptions = this.getTrackOptions();\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Wow Crazy Blindtest</h1>\n          </header>\n          <div className=\"App-images\">\n            <AlbumCover track={currentTrack} />\n            <Sound\n              url={currentTrack.preview_url}\n              playStatus={Sound.status.PLAYING}\n            />\n            <div className=\"App-buttons\">\n              {trackOptions.map((track, index) => (\n                <Button\n                  key={`${track.id}-${index}`}\n                  onClick={() => this.checkAnswer(track.id)}\n                >\n                  {track.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n          <div className=\"App-buttons\"></div>\n        </div>\n      );\n    } else {\n      return <img src={loading} className=\"loading\" alt=\"loading\" />;\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}